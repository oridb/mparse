use std

use "tokdefs"

pkg mparse =
	type parser = struct
		/* tokenizer state */
		last	: std.option((srcloc, tok))
		next	: std.option((srcloc, tok))
		rest	: byte[:]
		data	: byte[:]
		loc	: srcloc

		/* parser state */
		curns	: byte[:]
		curvis	: vis
		stabstk	: stab#[:]
		curstab	: stab#
		file	: file#
	;;

	type srcloc = struct
		file	: byte[:]
		line	: int
		col	: int
	;;

	type attr = union
		`Attrpkglocal
		`Attrextern
		`Attrnoret
	;;

	type file = struct
		path	: byte[:]
		uses	: usefile[:]
		libs	: byte[:][:]
		extlibs	: byte[:][:]
		extinit	: dcl#[:]

		init	: std.option(dcl#)
		builtin	: stab#
		globls	: stab#
		ns	: std.htab(byte[:], stab#)#
		dcls	: dcl#[:]
	;;

	type stmt = union
		`Nexpr	expr#
		`Nbreak
		`Ncont
		`Nlbl	name
		`Ngoto	name
		`Nloop	loopstmt#
		`Niter	iterstmt#
		`Nif	ifstmt#
		`Nmatch matchstmt#
		`Ndcl	dcl#
	;;

	type tydef = struct
		ty	: ty
		id	: int32
		loc	: srcloc
		fixed	: bool
		found	: bool
		traits	: std.bitset#
	;;
		
	type ty = union
		`Tynone
		`Tyvoid
		`Tybool
		`Tychar
		/* integers */
		`Tyint8
		`Tyint16
		`Tyint32
		`Tyint64
		`Tyint
		/* unsigned integers */
		`Tybyte
		`Tyuint8
		`Tyuint16
		`Tyuint32
		`Tyuint
		`Tyuint64
		/*floats */
		`Tyflt32
		`Tyflt64
		/* a bit odd.. */
		`Tyvalist
		/* compound types */
		`Tyslice tydef#
		`Typtr tydef#
		`Tyarray (tydef#, std.option(expr#))
		`Tystruct dcl#[:]
		`Tyunion ucon#[:]
		`Tytuple tydef#[:]
		`Tyfunc tydef#[:]
		/* user defined types */
		`Tyname tyname#
		`Tyunres tyname#
		`Typaram (byte[:], name[:])
		`Tyvar int32
	;;

	type tyname = struct
		name	: name
		params	: tydef#[:]
		args	: tydef#[:]
		def	: tydef#
	;;

	type ucon = struct
		loc	: srcloc
		tag	: name
		uty	: tydef#
		ety	: std.option(tydef#)
	;;

	type impldef = struct
		loc	: srcloc
		vis	: vis
		name	: name
		ty	: tydef#
		aux	: tydef#[:]
		dcls	: dcl#[:]
		isimport	: bool
	;;

	type expr = struct
		ty	: tydef#
		loc	: srcloc
		e	: exprop
	;;

	type exprop = union
		`Onop
		`Oadd	(expr#, expr#)
		`Osub	(expr#, expr#)
		`Omul	(expr#, expr#)
		`Odiv	(expr#, expr#)
		`Omod	(expr#, expr#)
		`Oneg	expr#
		`Obor	(expr#, expr#)
		`Oband	(expr#, expr#)
		`Obxor	(expr#, expr#)
		`Obsl	(expr#, expr#)
		`Obsr	(expr#, expr#)
		`Obnot	expr#
		`Opreinc	expr#
		`Opostinc	expr#
		`Opredec	expr#
		`Opostdec	expr#
		`Oaddr	expr#
		`Oderef	expr#
		`Olor	(expr#, expr#)
		`Oland	(expr#, expr#)
		`Olnot	expr#
		`Oeq	(expr#, expr#)
		`One	(expr#, expr#)
		`Ogt	(expr#, expr#)
		`Oge	(expr#, expr#)
		`Olt	(expr#, expr#)
		`Ole	(expr#, expr#)
		`Oasn	(expr#, expr#)
		`Oaddeq	(expr#, expr#)
		`Osubeq	(expr#, expr#)
		`Omuleq	(expr#, expr#)
		`Odiveq	(expr#, expr#)
		`Omodeq	(expr#, expr#)
		`Oboreq	(expr#, expr#)
		`Obandeq	(expr#, expr#)
		`Obxoreq	(expr#, expr#)
		`Obsleq	(expr#, expr#)
		`Obsreq	(expr#, expr#)
		`Oidx	(expr#, expr#)
		`Oslice	(expr#, std.option(expr#), std.option(expr#))
		`Omemb	(expr#, byte[:])
		`Osize	tydef#
		`Ocall	(expr#, expr#[:])
		`Ocast	(expr#, tydef#)
		`Oret	expr#
		`Ojmp	name
		`Obreak
		`Ocontinue
		`Ovar	name
		`Ogap
		`Olit	lit
		`Oucon	(name, std.option(expr#))
		`Otup	expr#[:]
		`Ostruct	(byte[:], expr#)[:]
		`Oarr	(std.option(expr#), expr#)[:]
		`Oidxlen
	;;

	type dcl = struct
		loc	: srcloc
		id	: int32
		name	: name
		vis	: vis

		ty	: tydef#
		init	: std.option(expr#)
		tr	: std.option(traitdef#)
		impls	: std.htab(tydef#, dcl#)

		isglobl	: bool
		isconst	: bool
		isnoret	: bool

		isextern	: bool
		isimport	: bool
		ishidden	: bool
		ispkglocal	: bool
		isgeneric	: bool
	;;

	type loopstmt = struct
		init	: expr#
		cond	: expr#
		step	: expr#
		body	: block#
	;;

	type iterstmt = struct
		pat	: expr#
		iter	: expr#
		body	: block#
	;;

	type ifstmt = struct
		cond	: expr#
		iftrue	: block#
		iffalse	: block#
	;;

	type block = struct
		loc	: srcloc
		stab	: stab#
		stmts	: stmt#[:]
	;;

	type matchstmt = struct
		val	: expr#
		cases	: matchcase[:]
	;;

	type matchcase = struct
		pat	: expr#
		act	: block#
	;;

	type lit = union
		`Lint	(uint64, int, bool)
		`Lflt	flt64
		`Lchr	char
		`Lstr	byte[:]
		`Llbl	byte[:]
		`Lbool	bool
		`Lfunc	func#
		`Lvoid
	;;

	type traitdef = struct
		id	: int32
		loc	: srcloc
	//	vis	: vis
		name	: name
		param	: tydef#
		aux	: tydef#[:]
		dcls	: dcl#[:]
	;;

	type usefile = union
		`Ulocal	byte[:]
		`Ulib	byte[:]
	;;

	type func = struct
		loc	: srcloc
		stab	: stab#
		ty	: tydef#
		args	: dcl#[:]
		body	: block#
	;;

	type stab = struct
		super	: std.option(stab#)
		ns	: byte[:]
		isfunc	: bool

		env	: std.htab(name, sym)#
		syms	: std.htab(name, sym)#
		types	: std.htab(name, tysym)#
		impls	: std.htab(name, impldef#)#
	;;

	type sym = union
		`Dcl	dcl#
		`Ucon	ucon#
	;;

	type tysym = union
		`Tyfwd	srcloc
		`Tydef	tydef#

		`Trfwd	traitdef#
		`Trdef	traitdef#
	;;

	type name = struct
		ns	: byte[:]
		name	: byte[:]
	;;

	type vis = union
		`Visintern
		`Vishidden
		`Visexport
		`Visbuiltin
	;;
;;
