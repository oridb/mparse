use std

use "types"
use "stab"

pkg mparse =
	/* expr nodes */
	const mkexpr	: (l : srcloc, e : exprop -> expr#)
	const mkblk	: (l : srcloc, st : stab#, stmts : stmt#[:] -> block#)
	const mkif	: (l : srcloc, cond : expr#, iftrue : block#, iffalse : block# -> ifstmt#)
	const mkfunc	: (l : srcloc, st : stab#, ty : tydef#, args : dcl#[:], body : block# -> func#)
	const mkstmt	: (l : srcloc, stmt : stmt -> stmt#)
	const mkloop	: (l : srcloc, init : expr#, cond : expr#, step : expr#, body : block# -> loopstmt#)
	const mkiter	: (l : srcloc, pat : expr#,  seq : expr#, bodk : block# -> iterstmt#)
	const mkmatch	: (l : srcloc, val : expr#, cases : matchcase[:] -> matchstmt#)
	const mktraitdef	: (l : srcloc, name : name, ty : tydef#, auxty : tydef#[:], dcls : dcl#[:] -> traitdef#)
	const mkimpldef	: (l : srcloc, name : name, ty : tydef#, auxty : tydef#[:], dcls : dcl#[:] -> impldef#)

	/* type nodes */
	const mkname	: (name : name, params : tydef#[:] -> tyname#)
	const mktyvar	: (l : srcloc -> tydef#)
	const mkty	: (l : srcloc, ty : ty -> tydef#)
	const tyinit	: (f : file# -> void)

	/* globals */
	var types	: tydef#[:]
	var tymap	: int32[:]
	var traits	: std.bitset#[:]
;;

/* global state */
var ntypes	: int32 = 0
var ntraits	: int32 = 0
var tymap
var types
var traits

const tyinit = {f
	var t

	t = mkty([.line=-1], `Tyvoid)
	puttype(f.builtin, [.ns="", .name="void"], t)
	t = mkty([.line=-1], `Tybool)
	puttype(f.builtin, [.ns="", .name="bool"], t)
	t = mkty([.line=-1], `Tychar)
	puttype(f.builtin, [.ns="", .name="char"], t)
	t = mkty([.line=-1], `Tyint8)
	puttype(f.builtin, [.ns="", .name="int8"], t)
	t = mkty([.line=-1], `Tyint16)
	puttype(f.builtin, [.ns="", .name="int16"], t)
	t = mkty([.line=-1], `Tyint32)
	puttype(f.builtin, [.ns="", .name="int32"], t)
	t = mkty([.line=-1], `Tyint)
	puttype(f.builtin, [.ns="", .name="int"], t)
	t = mkty([.line=-1], `Tyint64)
	puttype(f.builtin, [.ns="", .name="int64"], t)

	/* unsigned integers */
	t = mkty([.line=-1], `Tybyte)
	puttype(f.builtin, [.ns="", .name="byte"], t)
	t = mkty([.line=-1], `Tyuint8)
	puttype(f.builtin, [.ns="", .name="uint8"], t)
	t = mkty([.line=-1], `Tyuint16)
	puttype(f.builtin, [.ns="", .name="uint16"], t)
	t = mkty([.line=-1], `Tyuint32)
	puttype(f.builtin, [.ns="", .name="uint32"], t)
	t = mkty([.line=-1], `Tyuint)
	puttype(f.builtin, [.ns="", .name="uint"], t)
	t = mkty([.line=-1], `Tyuint64)
	puttype(f.builtin, [.ns="", .name="uint64"], t)

	/*floats */
	t = mkty([.line=-1], `Tyflt32)
	puttype(f.builtin, [.ns="", .name="flt32"], t)
	t = mkty([.line=-1], `Tyflt64)
	puttype(f.builtin, [.ns="", .name="flt64"], t)

	/* a bit odd.. */
	t = mkty([.line=-1], `Tyvalist)
	puttype(f.builtin, [.ns="", .name="..."], t)
}

const mkexpr = {l, e
	-> std.mk([
		.loc = l,
		.ty = mktyvar(l),
		.e = e,
	])
}

const mkblk = {l, st, stmts
	-> std.mk([
		.loc = l,
		.stab = st,
		.stmts = stmts,
	])
}

const mkfunc = {l, st, ty, args, body
	-> std.mk([
		.loc = l,
		.stab = st,
		.ty = ty,
		.args = args,
		.body = body,
	])
}

const mkstmt = {l, st
	-> std.mk(st)
}

const mkif = {l, cond, iftrue, iffalse
	-> std.mk([
		.cond=cond,
		.iftrue=iftrue,
		.iffalse=iffalse,
	])
}

const mkloop = {l, init, cond, step, blk
	-> std.mk([
		.init=init,
		.cond=cond,
		.step=step,
		.body=blk,
	])
}

const mkiter = {l, pat, iter, blk
	-> std.mk([
		.pat=pat,
		.iter=iter,
		.body=blk
	])
}

const mkmatch = {l, val, cases
	-> std.mk([
		.val=val,
		.cases=cases,
	])
}

const mktraitdef = {l, name, ty, auxty, dcls 
	-> std.mk([
		.id=ntraits++,
		.loc=l,
		.name=name,
		.param=ty,
		.aux=auxty,
		.dcls=dcls,
	])
}

const mkimpldef = {l, name, ty, auxty, dcls 
	-> std.mk([
		.loc=l,
		.name=name,
		.ty=ty,
		.aux=auxty,
		.dcls=dcls,
	])
}

const mktyvar = {l
	-> mkty(l, `Tyvar ntypes)
}

const mkty = {l, ty
	var t

	t = std.mk([
		.ty = ty,
		.id = ntypes++,
		.loc = l,
		.fixed = false,
		.found = false,
		.traits = std.mkbs(),
	])
	std.slpush(&types, t)
	std.slpush(&traits, std.mkbs())
	std.slpush(&tymap, -1)
	-> t
}


const mkname = {nam, params
	-> std.mk([
		.name=nam,
		.params=params
	])
}
