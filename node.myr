use std

use "types"

pkg parse =
	/* expr nodes */
	const mkexpr	: (l : srcloc, e : exprop -> expr#)
	const mkblk	: (l : srcloc, st : stab#, stmts : stmt#[:] -> block#)
	const mkfunc	: (l : srcloc, st : stab#, ty : tydef#, args : dcl#[:], body : block# -> func#)

	/* type nodes */
	const mktyvar	: (l : srcloc -> tydef#)
	const mkty	: (l : srcloc, ty : ty -> tydef#)
;;

/* global state */
var ntypes	: int64 = 0

const mkexpr = {l, e
	-> std.mk([
		.loc = l,
		.ty = mktyvar(l),
		.e = e,
	])
}

const mkblk = {l, st, stmts
	-> std.mk([
		.loc = l,
		.stab = st,
		.stmts = stmts,
	])
}

const mkfunc = {l, st, ty, args, body
	-> std.mk([
		.loc = l,
		.stab = st,
		.ty = ty,
		.args = args,
		.body = body,
	])
}

const mktyvar = {l
	-> mkty(l, `Tyvar ntypes)
}

const mkty = {l, ty
	-> std.mk([
		.ty = ty,
		.id = ntypes++,
		.loc = l,
		.fixed = false,
		.found = false,
		.traits = std.mkbs(),
	])
}

