use std

use "errors"
use "node"
use "stab"
use "tok"
use "tokdefs"
use "types"

pkg mparse =
	const infer	: (p : parser#, f : file# -> void)
;;

type inferstate = struct
	parser	: parser#
	file	: file#
	debug	: bool
;;

const infer = {p, f
	var st : inferstate

	st = [
		.parser = p,
		.file = f,
	]

	for dcl in f.dcls
		inferdcl(&st, dcl)
	;;
	for dcl in f.dcls
		fix(&st, dcl)
	;;
}


const fix = {st, dcl
	match dcl.init
	| `std.None:	
		dcl.ty = tyfix(st, dcl.ty)
	| `std.Some init:
		exprfix(st, init)
		dcl.ty = tyfix(st, dcl.ty)
	;;
}

const exprfix = {st, e
}

const tyfix = {st, ty
	-> tf(st, ty)
}

const inferdcl = {st, dcl
	std.put("~~ inferring {} --\n", dcl.name)
	match dcl.init
	| `std.None:
	| `std.Some init:
		inferexpr(st, init)
		unify(st, dcl.ty, init.ty)
	;;
}

const inferexpr = {st, e
	e = checkns(st, e)
	match e
	| &[.e=`Onop]:	std.fatal("generated nop at {} ({})\n", e.loc, e)
	| &[.e=`Oadd (a, b)]:	inferbinop(st, e, a, b, "numeric")
	| &[.e=`Osub (a, b)]:	inferbinop(st, e, a, b, "numeric")
	| &[.e=`Omul (a, b)]:	inferbinop(st, e, a, b, "numeric")
	| &[.e=`Odiv (a, b)]:	inferbinop(st, e, a, b, "numeric")
	| &[.e=`Omod (a, b)]:	inferbinop(st, e, a, b, "numeric")
	| &[.e=`Oneg a]:	std.fatal("no inference for {}\n", e)
	| &[.e=`Obor (a, b)]:	inferbinop(st, e, a, b, "integer")
	| &[.e=`Oband (a, b)]:	inferbinop(st, e, a, b, "integer")
	| &[.e=`Obxor (a, b)]:	inferbinop(st, e, a, b, "integer")
	| &[.e=`Obsl (a, b)]:	inferbinop(st, e, a, b, "integer")
	| &[.e=`Obsr (a, b)]:	inferbinop(st, e, a, b, "integer")
	| &[.e=`Obnot a]:	std.fatal("no inference for {}\n", e)
	| &[.e=`Opreinc a]:	inferincop(st, e, a)
	| &[.e=`Opostinc a]:	inferincop(st, e, a)
	| &[.e=`Opredec a]:	inferincop(st, e, a)
	| &[.e=`Opostdec a]:	inferincop(st, e, a)
	| &[.e=`Oaddr a]:	inferaddr(st, e, a)
	| &[.e=`Oderef a]:	inferderef(st, e, a)
	| &[.e=`Olor (a, b)]:	inferbinlogical(st, e, a, b)
	| &[.e=`Oland (a, b)]:	inferbinlogical(st, e, a, b)
	| &[.e=`Olnot a]:	std.fatal("no inference for {}\n", e)
	| &[.e=`Oeq (a, b)]:	inferbinlogical(st, e, a, b)
	| &[.e=`One (a, b)]:	inferbinlogical(st, e, a, b)
	| &[.e=`Ogt (a, b)]:	inferbinlogical(st, e, a, b)
	| &[.e=`Oge (a, b)]:	inferbinlogical(st, e, a, b)
	| &[.e=`Olt (a, b)]:	inferbinlogical(st, e, a, b)
	| &[.e=`Ole (a, b)]:	inferbinlogical(st, e, a, b)
	| &[.e=`Oasn (a, b)]:	inferbinop(st, e, a, b, "")
	| &[.e=`Oaddeq (a, b)]:	inferbinop(st, e, a, b, "numeric")
	| &[.e=`Osubeq (a, b)]:	inferbinop(st, e, a, b, "numeric")
	| &[.e=`Omuleq (a, b)]:	inferbinop(st, e, a, b, "numeric")
	| &[.e=`Odiveq (a, b)]:	inferbinop(st, e, a, b, "numeric")
	| &[.e=`Omodeq (a, b)]:	inferbinop(st, e, a, b, "numeric")
	| &[.e=`Oboreq (a, b)]:	inferbinop(st, e, a, b, "integer")
	| &[.e=`Obandeq (a, b)]:	inferbinop(st, e, a, b, "integer")
	| &[.e=`Obxoreq (a, b)]:	inferbinop(st, e, a, b, "integer")
	| &[.e=`Obsleq (a, b)]:	inferbinop(st, e, a, b, "integer")
	| &[.e=`Obsreq (a, b)]:	inferbinop(st, e, a, b, "integer")
	| &[.e=`Oidx (a, b)]:	inferidx(st, e, a, b)
	| &[.e=`Oslice (a, lo, hi)]:	std.fatal("no inference for {}\n", e)
	| &[.e=`Omemb (a, memb)]:	std.fatal("no inference for {}\n", e)
	| &[.e=`Osize a]:	std.fatal("no inference for {}\n", e)
	| &[.e=`Ocall (a, args)]:	std.fatal("no inference for {}\n", e)
	| &[.e=`Ocast (a, ty)]:	std.fatal("no inference for {}\n", e)
	| &[.e=`Oret a]:	std.fatal("no inference for {}\n", e)
	| &[.e=`Ojmp name]:	std.fatal("no inference for {}\n", e)
	| &[.e=`Obreak]:	std.fatal("no inference for {}\n", e)
	| &[.e=`Ocontinue]:	std.fatal("no inference for {}\n", e)
	| &[.e=`Ovar _]:	/* already dealt in checkns */
	| &[.e=`Ogap]:	std.fatal("no inference for {}\n", e)
	| &[.e=`Olit lit]:	inferlit(st, lit)
	| &[.e=`Oucon (name, arg)]:	std.fatal("no inference for {}\n", e)
	| &[.e=`Otup vals]:	std.fatal("no inference for {}\n", e)
	| &[.e=`Ostruct vals]:	std.fatal("no inference for {}\n", e)
	| &[.e=`Oarr vals]:	std.fatal("no inference for {}\n", e)
	| &[.e=`Oidxlen]:	std.fatal("no inference for {}\n", e)
	;;
}

const checkns = {st, e
	var ns, name

	/*
	if this is in the form of 'ident.memb', rather than
	'(complex + expr).name', this could be a namespace
	lookup. Pull out the possible-namespace and member.
	*/
	match e
	| &[.e=`Omemb (base, memb)]:
		match base
		| &[.e=`Ovar n]:
			ns = n.name
			name = memb
		| _:
			-> e
		;;
	| &[.e=`Ovar [.ns="", .name=nam]]:
		if std.hthas(st.file.ns, nam)
			err(e.loc, "variable {} shadows namespace\n", nam)
		;;
		match getdcl(st.parser.curstab, [.ns="", .name=nam])
		| `std.Some d:	initvar(st, e, d)
		| `std.None:	err(e.loc, "undeclared variable {}", nam)
		;;
		-> e
	| _:
		-> e
	;;


	/*
	if we have a namespace by this name, then we need to
	resolve the var in it, and build an `Ovar instead of
	an `Omemb expression.
	*/
	match std.htget(st.file.ns, ns)
	| `std.None:	-> e
	| `std.Some stab:	
		match getdcl(stab, [.ns=ns, .name=name])
		| `std.None:
			err(e.loc, "undeclared variable {}", e)
		| `std.Some dcl:
			e = mkexpr(e.loc, `Ovar [.ns=ns, .name=name])
			initvar(st, e, dcl)
			-> e
		;;
	;;
}

const initvar = {st, e, dcl
	std.assert(!dcl.isgeneric, "generics not yet supported\n")
	e.ty = dcl.ty
}

const inferbinop = {st, e, a, b, traits
	inferexpr(st, a)
	inferexpr(st, b)
	unify(st, a.ty, b.ty)
	unify(st, e.ty, a.ty)
}

const inferincop = {st, e, val
}

const inferbinlogical = {st, e, a, b
}

const inferidx = {st, e, base, idx
}

const inferaddr = {st, e, pointee
}

const inferderef = {st, e, pointer
}

const inferlit = {st, l
}

const unify = {st, u, v
	var a, b

	a = tf(st, u)
	b = tf(st, v)

	if a == b
		-> a
	;;

	if tyrank(b) < tyrank(a)
		std.swap(&a, &b)
	;;

	if st.debug
		std.put("unify {} => {}\n", a, b)
	;;

	if istyvar(a) && !istyvar(b) && occurs(st, a, b)
		err(a.loc, "{} occurs within {}, leading to infinite type\n")
	;;

	if istyvar(a) || tyeq(a, b)
		std.put("mapped {}({}) => {}, len: {}\n", a, a.id, b, tymap.len)
		tymap[a.id] = b.id
	;;
	if istyarray(a) && istyarray(b)
		checksize(st, a, b)
	;;

	match (a, b)
	| (&[.ty=`Tyvoid], &[.ty=`Tyvoid]):	-> a
	| (&[.ty=`Tybool], &[.ty=`Tybool]):	-> a
	| (&[.ty=`Tychar], &[.ty=`Tychar]):	-> a
	| (&[.ty=`Tyint8], &[.ty=`Tyint8]):	-> a
	| (&[.ty=`Tyint16], &[.ty=`Tyint16]):	-> a
	| (&[.ty=`Tyint32], &[.ty=`Tyint32]):	-> a
	| (&[.ty=`Tyint64], &[.ty=`Tyint64]):	-> a
	| (&[.ty=`Tyint], &[.ty=`Tyint]):	-> a
	| (&[.ty=`Tybyte], &[.ty=`Tybyte]):	-> a
	| (&[.ty=`Tyuint8], &[.ty=`Tyuint8]):	-> a
	| (&[.ty=`Tyuint16], &[.ty=`Tyuint16]):	-> a
	| (&[.ty=`Tyuint32], &[.ty=`Tyuint32]):	-> a
	| (&[.ty=`Tyuint], &[.ty=`Tyuint]):	-> a
	| (&[.ty=`Tyuint64], &[.ty=`Tyuint64]):	-> a
	| (&[.ty=`Tyflt32], &[.ty=`Tyflt32]):	-> a
	| (&[.ty=`Tyflt64], &[.ty=`Tyflt64]):	-> a
	| (&[.ty=`Tyvalist], &[.ty=`Tyvalist]):	-> a
	| (&[.ty=`Tyvar _], &[.ty=t]):
		mergetraits(st, a, b)
		-> a
	| _:
		err(a.loc, "type mismatch: {} mismatches with {}\n", a, b)
	;;
}

const mergetraits = {st, a, b
	if istyvar(b)
		std.bsunion(traits[a.id], traits[b.id])
		-> true
	elif std.bsissubset(traits[a.id], traits[b.id])
		-> true
	else
		err([.line=-1], "{} missing traits for {} (FIXME: errors)\n", a, b)
	;;
}

const checksize = {st, a, b
}

const tylookup = {ty
	while true
		match tymap[ty.id]
		| -1:	-> ty
		| id:	ty = types[id]
		;;
	;;
	-> ty
}

const tf = {st, ty : tydef#
	ty = tylookup(ty)
	ty = tyresolve(st, ty)
	-> ty
}

const tyresolve = {st, ty
	match ty.ty
	| `Tyunres namedty:
		match gettype(st.parser.curstab, namedty.name)
		| `std.Some r:	-> r
		| `std.None:	err([.line=-1], "missing type {}\n", ty)
		;;
	| _:
		-> ty
	;;
}

const tyrank = {t
	match (istyvar(t), hastraits(t))
	| (true, false):	-> 0
	| (true, true):	-> 1
	| (false, _):	-> 2
	;;
}

const hastraits = {t
	-> false
}

const occurs = {st, a, b
	-> false
}

const tyeq = {a, b
	-> false
}

const istyvar = {t
	match t
	| &[.ty=`Tyvar _]:	-> true
	| _:	-> false
	;;
}

const istyarray = {t
	match t
	| &[.ty=`Tyarray _]:	-> true
	| _:	-> false
	;;
}

