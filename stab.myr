use std

use "errors"
use "types"
use "tokdefs"
use "tok"

pkg mparse =
	const setpkg	: (f : file#, st : stab#, name : byte[:]-> void)
	const mkstab	: (super : std.option(stab#) -> stab#)
	const pushstab	: (p : parser#, st : stab# -> void)
	const popstab	: (p : parser# -> void)

	const putdcl	: (st : stab#, name : name, sym : dcl# -> void)
	const getdcl	: (st : stab#, name : name -> std.option(dcl#))
	const putucon	: (st : stab#, name : name, sym : ucon# -> void)
	const getucon	: (st : stab#, name : name -> std.option(ucon#))

	const puttype	: (st : stab#, name : name, ty : tydef# -> void)
	const puttypefwd	: (st : stab#, name : name, loc : srcloc -> void)
	const gettype	: (st : stab#, name : name -> std.option(tydef#))

	const puttrait	: (st : stab#, name : name, tr : traitdef# -> void)
	const puttraitfwd	: (st : stab#, name : name, tr : traitdef# -> void)
;;

const mkstab = {super
	-> std.mk([
		.super = super,
		.ns = "",
		.isfunc = false,
		.syms = std.mkht(stnamehash, stnameeq),
		.types = std.mkht(stnamehash, stnameeq),
		.impls = std.mkht(stnamehash, stnameeq),
		.env = std.mkht(stnamehash, stnameeq),
	])
}

const pushstab = {p, st
	std.slpush(&p.stabstk, st)
	p.curstab = st
}

const popstab = {p
	std.slpop(&p.stabstk)
	if p.stabstk.len > 0
		p.curstab = p.stabstk[p.stabstk.len - 1]
	;;
}

const setpkg = {f, st, ns
	if st.ns.len != 0
		std.fatal("package name already set for pkg {}\n", st.ns)
	;;
	st.ns = ns
	std.htput(f.ns, ns, st)
}

const putdcl = {st, n, sym
	match std.htget(st.syms, n)
	| `std.Some `Dcl d:
		if !mergedcl(d, sym)
			err(sym.loc, "duplicate declaration of {}, first declared on {}\n", n, d.loc)
		;;
	| `std.Some `Ucon u:	err(sym.loc, "duplicate declaration of {}, first declared on {}\n", n, u.loc)
	| `std.None:	/* everthing is fine */
	;;
	std.htput(st.syms, n, `Dcl sym)
}

const getdcl = {st, n
	while true
		match std.htget(st.syms, n)
		| `std.Some `Dcl d:	-> `std.Some d
		| _:	/* nothing */
		;;
		match st.super
		| `std.Some super:	st = super
		| `std.None:	-> `std.None
		;;
	;;
	std.die("unreachable")
}

const putucon = {st, n, uc
	match std.htget(st.syms, n)
	| `std.Some `Dcl d:	err(uc.loc, "duplicate declaration of {}, first declared on {}\n", n, d.loc)
	| `std.Some `Ucon u:	err(uc.loc, "duplicate declaration of {}, first declared on {}\n", n, u.loc)
	| `std.None:	/* everthing is fine */
	;;
	std.htput(st.syms, n, `Ucon uc)
}

const getucon = {st, n
	while true
		match std.htget(st.syms, n)
		| `std.Some `Ucon u:	-> `std.Some u
		| _:	/* nothing */
		;;
		match st.super
		| `std.Some super:	st = super
		| `std.None:	-> `std.None
		;;
	;;
	std.die("unreachable")
}

const puttype = {st, n, ty
	match std.htget(st.types, n)
	| `std.Some `Tyfwd _:	/* everything is fine */
	| `std.Some `Trfwd l:	err(ty.loc, "{} initially declared as trait on {}\n", n, l)
	| `std.Some `Tydef t:	err(ty.loc, "duplicate declaration of {}, first declared on {}\n", n, t.loc)
	| `std.Some `Trdef t:	err(ty.loc, "duplicate declaration of {}, first declared on {}\n", n, t.loc)
	| `std.None:	/* everything is fine */
	;;
	std.htput(st.types, n, `Tydef ty)
}

const puttypefwd = {st, n, loc
	match std.htget(st.types, n)
	| `std.Some `Tyfwd _:	/* everything is fine */
	| `std.Some `Tydef t:	/* everything is fine, although a bit weird to get a fwd after a def */
	| `std.Some `Trfwd t:	err(loc, "{} initially declared as trait on {}\n", n, t.loc)
	| `std.Some `Trdef t:	err(loc, "{}, initially declared as trait on {}\n", n, t.loc)
	| `std.None:	/* everything is fine */
	;;
	std.htput(st.types, n, `Tyfwd loc)
}

const gettype = {st, n
	while true
		match std.htget(st.types, n)
		| `std.Some `Tydef t:	-> `std.Some t
		| _:	/* nothing */
		;;
		match st.super
		| `std.Some super:	st = super
		| `std.None:	-> `std.None
		;;
	;;
	std.die("unreachable")
}

const puttrait = {st, n, tr
	match std.htget(st.types, n)
	| `std.Some `Tyfwd l:	err(tr.loc, "{} initially declared as type on {}\n", n, l)
	| `std.Some `Trfwd _:	/* everything is fine */
	| `std.Some `Tydef t:	err(tr.loc, "duplicate declaration of {}, first declared on {}\n", n, t.loc)
	| `std.Some `Trdef t:	err(tr.loc, "duplicate declaration of {}, first declared on {}\n", n, t.loc)
	| `std.None:	/* everything is fine */
	;;
	std.htput(st.types, n, `Trdef tr)
}

const puttraitfwd = {st, n, tr
	std.assert(std.streq(st.ns, n.ns), "sym name mismatches stab name\n")
	match std.htget(st.types, n)
	| `std.Some `Tyfwd l:	err(tr.loc, "{} initially declared as type on {}\n", n, l)
	| `std.Some `Tydef t:	err(tr.loc, "{} initially declared as type on }\n", n, t.loc)
	| `std.Some `Trfwd _:	/* everything is fine */
	| `std.Some `Trdef t:	/* everything is fine, although a bit weird to get a fwd after a def */
	| `std.None:	/* everything is fine */
	;;
	std.htput(st.types, n, `Trfwd tr)
}

const mergedcl = {old, new
       match old.init
       | `std.None:    -> mergablety(old.ty, new.ty)
       | `std.Some _:
               match new.init
               | `std.Some _:  -> false        /* double initialized */
               | `std.None:    -> mergablety(old.ty, new.ty)
               ;;
       ;;
}

const mergablety = {old, new
       match old
       | (&[.ty=`Tyvar _]):    -> true
       | _:
               match new
               | (&[.ty=`Tyvar _]):    -> true
               | (&[.ty=_]):   -> false
               ;;
       ;;
}

const stnamehash = {n
	-> std.strhash(n.name)
}

const stnameeq = {a, b
	-> std.streq(a.name, b.name)
}

